이전 글의 content provider 생성 방법에 따라 직접 구현해보겠습니다. java와 kotlin 테이블를 만들고 각 테이블에 예제 코드 데이터가 있는 Content provider를 생성합니다. 그럼 외부 앱에서 해당 데이터를 쿼리하는 예제를 만들겁니다. 안드로이드 공식 문서에서 예제를 java나 kotlin으로 변환하고 해당 코드를 복사하는 흐름에서 따왔습니다.

1. Content Provider 앱
1)구현 시작 전
예제에 content provider가 진짜로 필요한지 생각해보겠습니다. 코드 데이터를 단순 문자열이 아닌 코드 제목과 내용으로 구성된 테이블로 관리할겁니다. 제목에는 코드가 어떤 내용인지 표시하고 내용에는 실제 코드를 저장하고 싶기 때문입니다. 테이블 형태의 데이터를 다른 앱으로 복사할 수 있도록 허용할 것이기에 content provider가 필요해보입니다.


2)데이터 저장소 설계 및 구현
테이블 형태의 구조화된 데이터이기 때문에 SQLite 관계형 데이터베이스에 저장하겠습니다. 물론 Room도 있지만 content provider 예제인 만큼 provider에 집중하기 위해 SQLite를 사용하겠습니다. 데이터 베이스와 java 및 kotlin 
테이블을 생성하면 됩니다. 각 테이블에는 기본 키를 위한 ID과 더불어 title과 content 열을 만듭니다.

- NotesDatabase.java

public class NotesDatabase extends SQLiteOpenHelper {

    private static final String DATABASE_NAME="notes.db";
    private static final int DATABASE_VERSION=1;

    public NotesDatabase(Context context){
        super(context,DATABASE_NAME,null,DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        final String SQLITE_CREATE_JAVA_TABLE=
                "CREATE TABLE "+ NotesContract.JavaNotesEntry.TABLE_NAME +"("+
                NotesContract.JavaNotesEntry._ID +" INTEGER PRIMARY KEY AUTOINCREMENT, "+
                NotesContract.JavaNotesEntry.COLUMN_TITLE+" TEXT NOT NULL, "+
                NotesContract.JavaNotesEntry.COLUMN_CONTENT+" TEXT NOT NULL);";

        final String SQLITE_CREATE_KOTLIN_TABLE=
                "CREATE TABLE "+ NotesContract.KotlinNotesEntry.TABLE_NAME +"("+
                NotesContract.KotlinNotesEntry._ID +" INTEGER PRIMARY KEY AUTOINCREMENT, "+
                NotesContract.KotlinNotesEntry.COLUMN_TITLE+" TEXT NOT NULL, "+
                NotesContract.KotlinNotesEntry.COLUMN_CONTENT+" TEXT NOT NULL);";

        db.execSQL(SQLITE_CREATE_JAVA_TABLE);
        db.execSQL(SQLITE_CREATE_KOTLIN_TABLE);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS "+ NotesContract.JavaNotesEntry.TABLE_NAME);
        db.execSQL("DROP TABLE IF EXISTS "+ NotesContract.KotlinNotesEntry.TABLE_NAME);
        onCreate(db);
    }

}

코드에 사용된 상수는 contract class 구현 부분에 설명하겠습니다.
