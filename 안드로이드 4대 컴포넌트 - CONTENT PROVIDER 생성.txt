콘텐츠 제공자(Content Provider)는 중앙 데이터 저장소에 대한 접근을 관리하는 역할을 합니다. Android 애플리케이션에서 이를 구현하려면 하나 이상의 클래스를 작성해야합니다. 작성한 클래스 중 하나는 ContentProvider의 서브클래스를 구현하며, 이 클래스가 바로 다른 애플리케이션과 콘텐츠 제공자 간의 인터페이스 역할을 하게 됩니다. 이외 보조적인 클래스가 필요한 경우도 있습니다. 또한 매니페스트 파일에 콘텐츠 제공자 요소들을 추가해야 합니다. 

콘텐츠 제공자는 주로 다른 애플리케이션에서 데이터를 사용할 수 있도록 제공하기 위한 것이지만, 애플리케이션 내의 액티비티(Activity)에서도 사용자로 하여금 제공자가 관리하는 데이터를 조회하고 수정할 수있습니다. 이 페이지에는 콘텐츠 제공업체를 구축하기 위한 기본 프로세스와 사용할 API 목록이 포함되어 있습니다.



1. 구현 시작 전
1)공급업체 사용 여부 결정
공급업체를 구현하기 전에 콘텐츠 제공업체가 필요한지 여부를 결정해야 합니다. 다음 기능 중 하나 이상을 제공하려면 콘텐츠 제공업체를 구현해야 합니다:
- 복잡한 데이터나 파일을 다른 애플리케이션에 제공하려고 합니다.
- 사용자가 앱에서 다른 앱으로 복잡한 데이터를 복사할 수 있도록 허용해야 합니다.
- 검색 프레임워크를 사용하여 사용자 지정 검색 제안을 제공하려고 합니다.
- 애플리케이션 데이터를 위젯에 노출하려고 합니다.
-  AbstractThreadedSyncAdapter, CursorAdapter 또는 CursorLoader 클래스를 구현하려고 합니다.

데이터베이스나 기타 유형의 영구 저장소를 사용하는 경우, 사용이 전적으로 **자신의 애플리케이션 내부에서만 이루어지고 앞서 나열된 기능들 중 어떤 것도 필요하지 않다면**, 콘텐츠 제공자가 필요하지 않습니다.


2)공급업체 구현 과정
이제 다음 단계에 따라 공급업체를 구현합니다:

ⅰ) 데이터를 저장할 방식을 정하세요. 콘텐츠 제공업체는 두 가지 방식으로 데이터를 제공합니다:
파일 데이터
일반적으로 사진, 오디오 또는 비디오와 같은 파일 형태의 데이터입니다. 파일을 응용 프로그램의 개인 공간에 저장합니다. 다른 응용 프로그램의 파일 요청에 응답하여 제공업체가 파일에 대한 접근 수단을 제공할 수 있습니다.
구조화된 데이터
일반적으로 데이터베이스, array 또는 이와 유사한 구조 형태의 데이터입니다. 행과 열의 테이블과 호환되는 형태로 데이터를 저장합니다. 행은 사람이나 인벤토리의 항목과 같은 엔터티를 나타냅니다. 열은 사람의 이름이나 항목 가격과 같은 엔터티에 대한 일부 데이터를 나타냅니다. 이러한 유형의 데이터를 저장하는 일반적인 방법은 SQLite 데이터베이스에 있지만 모든 유형의 영구 저장소에서도 사용할 수 있습니다.

ⅱ) 콘텐츠 제공자 클래스의 구체적인 구현과 필요한 메서드을 정의합니다. 콘텐츠 제공자 클래스는 사용자의 데이터와 나머지 Android 시스템 간의 인터페이스입니다. 

ⅲ) 제공자의 권한 문자열, 콘텐츠 URI 및 열 이름을 정의합니다. 제공자의 응용 프로그램이 intent를 처리하도록 하려면 intent action, 추가 데이터 및 플래그도 정의하세요. 또한 데이터에 액세스하려는 응용 프로그램에 필요한 권한을 정의합니다. 이 모든 값을 별도의 계약 클래스의 상수로 정의하는 것을 고려해 보세요. 나중에 이 클래스를 다른 개발자에게 노출할 수 있습니다. 

ⅳ) 샘플 데이터 또는 공급자와 클라우드 기반 데이터 간에 데이터를 동기화할 수 있는 AbstractThreadedSyncAdapter 구현과 같은 다른 선택적 과정도 추가할 수 있습니다.



2.데이터 저장소 설계
1)저장 방식
콘텐츠 공급자는 구조화된 형식으로 저장된 데이터에 대한 인터페이스입니다. 인터페이스를 만들기 전에 데이터를 저장하는 방법을 결정해야 합니다. 원하는 형식으로 데이터를 저장한 다음 필요에 따라 데이터를 읽고 쓸 수 있도록 인터페이스를 설계할 수 있습니다.
다음은 Android에서 사용할 수 있는 데이터 저장 기술 중 일부입니다:

- 구조화된 데이터를 사용하는 경우 SQLite와 같은 관계형 데이터베이스 또는 LevelDB와 같은 비관계형 키값 데이터스토어를 고려하세요. 오디오, 이미지 또는 비디오 미디어와 같은 비정형 데이터를 사용하는 경우 데이터를 파일로 저장하는 것을 고려하세요. 여러 유형의 저장 방식을 조합하여 사용할 수도 있고 필요한 경우 단일 콘텐츠 제공업체를 사용하여 노출할 수 있습니다.

- Android 자체 제공업체가 테이블 지향 데이터를 저장하는 데 사용하는 SQLite 데이터베이스 API에 대한 액세스를 제공하는 Room 지속성 라이브러리와 상호 작용할 수 있습니다. 이 라이브러리를 사용하여 데이터베이스를 만들려면 RoomDatabase의 하위 클래스를 인스턴스화합니다. 저장소를 구현하기 위해 데이터베이스를 사용할 필요는 없습니다. 공급자는 관계형 데이터베이스와 유사하한 테이블 집합으로 외부로 표시하지만 공급자의 내부 구현을 위한 필요 요건은 아닙니다.

- 파일 데이터를 저장하기 위해 Android에는 다양한 파일 지향 API가 있습니다. 음악이나 동영상과 같은 미디어 관련 데이터를 제공하는 공급자를 설계하는 경우 테이블 데이터와 파일을 결합한 공급자가 있습니다.

- 드물게는 단일 애플리케이션에 대해 두 개 이상의 콘텐츠 제공자를 구현하면 이점을 얻을 수 있습니다. 예를 들어, 하나의 콘텐츠 제공자를 사용하여 위젯과 일부 데이터를 공유하고 다른 애플리케이션과 공유하기 위해 다른 데이터 세트를 노출할 수 있습니다.

- 네트워크 기반 데이터로 작업하려면 java.net 및 android.net 의 클래스를 사용하세요. 네트워크 기반 데이터를 데이터베이스와 같은 로컬 데이터 저장소에 동기화한 다음 데이터를 테이블 또는 파일로 제공할 수도 있습니다.

저장소 호환이 맞지 않아서 버전을 변경을 할 경우, 저장소에 새로운 버전 번호를 지정해야 합니다. 또한, 새로운 콘텐츠 제공자를 구현하는 앱의 버전 번호도 증가시켜야 합니다. 앱 버전은 빌드 파일에 있는 버전 코드를 말합니다. 이 변경을 통해 시스템 다운그레이드가 발생할 때, 호환되지 않는 콘텐츠 제공자를 가진 앱을 재설치하려고 할 때 시스템이 충돌하는 것을 방지할 수 있습니다.


2)데이터 설계 고려사항
공급업체의 데이터 구조를 설계하기 위한 몇 가지 팁은 다음과 같습니다

- 테이블 데이터에는 항상 공급자가 각 행에 대해 고유한 숫자 값으로 유지하는 "기본 키" 열이 있어야 합니다. 이 값을 통해 외래 키를 사용하여 행을 다른 테이블의 관련 행에 연결할 수 있습니다. 기본키 열에는 어떤 이름도 사용할 수 있지만, 공급자 쿼리 결과를 ListView에 연결하려면 검색된 열 중 하나에 _ID라는 이름이 있어야 하므로 BaseColumns._ID를 사용하는 것이 가장 좋습니다.

- 만약 비트맵 이미지나 파일 기반의 매우 큰  데이터를 제공하려면, 데이터를 테이블에 직접 저장하는 대신 파일에 저장하고 간접적으로 제공해야 합니다. 이렇게 할 경우, 사용자에게 제공자의 데이터를 접근하기 위해 ContentResolver 파일 메서드를 사용해야 한다는 것을 알려야 합니다.

- 이진 대형 객체(BLOB) 데이터 유형을 사용하면 크기가 다르거나 구조가 다른 데이터를 저장할 수 있습니다. 예를 들어 BLOB 열을 사용하여 프로토콜 버퍼 또는 JSON 구조를 저장할 수 있습니다.

BLOB를 사용하여 스키마 독립 테이블을 구현할 수도 있습니다. 이 유형의 테이블에서는 기본 키 열, MIME 유형 열, BLOB 유형의 하나 이상의 일반 열로 정의할 수 있습니다. BLOB 열의 데이터의 의미는 MIME 유형 열의 값으로 표시됩니다. 이렇게 하면 동일한 테이블에 다양한 행 유형을 저장할 수 있습니다. 연락처 제공업체의 "데이터" 테이블 ContactContract.Data는 스키마 독립 테이블의 예입니다.
