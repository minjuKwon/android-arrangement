Calendar provider는 사용자의 달력 이벤트를 위한 저장소입니다. Calendar provider API를 통해 calendar, 이벤트, 참석자, 알림 등에 대한 쿼리, 삽입, 업데이트 및 삭제 작업을 수행할 수 있습니다. Calendar provider API는 애플리케이션과 동기화 adapter에서 사용할 수 있습니다. 어디에서 사용하느냐에 따라 사용 방법이 달라집니다. 저희는 애플리케이션에서 사용하는 법을 알아볼겁니다. 

일반적으로 calendar의 데이터를 읽거나 쓰려면 manifest에 적절한 권한이 포함되어야 합니다. 작업을 더 쉽게 수행할 수 있도록 Calendar provider는 관련된 여러 intent를 제공합니다. 이러한 Intent는 삽입, 보기 및 편집하도록  calendar 앱으로 이동시킵니다. 사용자는 calendar 앱에서의 작업이 끝나면 원래의 앱으로 돌아가게 됩니다. 따라서 애플리케이션이 권한을 요청할 필요도 없고 이벤트를 보거나 생성할 수 있는 UI를 제공할 필요도 없습니다.


1. 기초
Content provider는 데이터를 저장하고 애플리케이션이 접근할 수 있도록 합니다. Calendar provider 같이 Android 플랫폼에서 제공하는 content provider는 일반적으로 관계형 데이터베이스 모델을 기반으로 테이블 형태의 데이터를 가집니다. 그렇기에 각 행은 record을 뜻하고 각 열은 특정 유형 및 의미를 가지는 데이터입니다. Calendar provider API를 통해 애플리케이션과 동기화 adapter는 사용자의 calendar 데이터를 저장하는 데이터베이스 테이블에 대한 읽기/쓰기 접근 권한을 얻을 수 있습니다.

모든 content provider는 자신의 데이터를 고유하게 식별하는 공개 URI를 가지며 Uri 객체 형태입니다. 여러 데이터(혹은 테이블)을 제어하는 provider는 각 데이터에 대한 별도의 URI를 가집니다. Provider의 모든 URI는 문자열 형태의 "content://"로 시작합니다. 이 식별자를 통해 provider에 의해 제어되는 데이터로 인식합니다. 또한 각 class(또는 테이블)에 대한 URI의 상수를 정의합니다. 이러한 URI는 <class>.CONTENT_URI 형식을 가집니다. 예를 들어 Events.CONTENT_URI처럼 표현합니다.

그림 1은 Calendar provider 데이터 모델을 보여줍니다. 주요 테이블과 서로 연결된 필드를 보여줍니다.

사용자는 여러 개의 calendar를 가질 수 있으며 다양한 유형의 계정과 연결할 수 있습니다. CalendarContract는 calendar과 이벤트 정보의 데이터 모델을 정의합니다. 해당 데이터는 다음과 같습니다.

- CalendarContract.Calendars
달력 정보 포함. 테이블의 각 행은 이름, 색상, 동기화 정보 등 단일 단력에 대한 세부 정보가 포함
- CalendarContract.Events
특정 이벤트 정보 포함. 테이블의 각 행에는 이벤트 이름, 위치, 시작 시간, 종료 시간 등 단일 이벤트에 대한 정보가 포함. 일회용 또는 여러번 반복 가능. 별도의 테이블에 참석자, 알림, 기타 속성이 저장. 각 행에는 이벤트 테이블의 _ID를 참조하는 EVENT_ID 존재. 
- CalendarContract.Instances
이벤트의 시작 및 종료 시간이 표시. 각 행은 단일 발생의 이벤트에 대한 정보 포함. 이벤트 instance에 1:1로 매핑. 반복 이벤트의 경우 해당 이벤트의 반복 수 만큼 여러 행이 자동으로 생성.
- CalendarContract.Attendees	
이벤트 참석자 정보 포함. 테이블의 각 행은 이벤트에 대한 단일 참석자에 대한 정보 포함. 참석자 유형과 해당 이벤트 참석 응답 지정.
- CalendarContract.Reminders	
알람/알림 데이터 포함. 테이블의 각 행은 이벤트에 대한 단일 알람 정보 포함. 한 이벤트에 여러 알람 설정 가능. 이벤트 당 최대 알람 수는 해당 calendar의 동기화 adapter에 설정된 MAX_REMINERDER으로 지정. 알람은 이벤트 시작 몇 분 전에 지정. 사용자에게 알람을 어떻게 울릴지 결정하는 방법이 포함.

Calendar provider는 유연하고 강력하게 설계되었습니다. 또한 좋은 사용자 경험을 제공하고 calendar와 calendar의 데이터 무결성 보호를 중요시합니다. 이를 위해 API 사용에 염두해야할 몇 가지 사항이 있습니다. 
- calendar 이벤트 삽입, 업데이트, 보기
Calendar provider에서 이벤트를 직접 삽입, 수정, 읽기 위해서는 적절한 권한이 필요합니다. 하지만 calendar의 전체 기능을 사용하거나 동기화 adapter가 아니라면 intent을 사용하여 충분히 해결할 수 있습니다. 해당 intent는 안드로이드의 calendar 앱에서 지원하며 읽기와 쓰기 작업을 도와줍니다. Intent를 사용하면 calendar 앱으로 이동되며 미리 작성된 양식을 바탕으로 작업(이벤트 생성, 수정 등)을 수행하도록 요청합니다. 사용자가 작업을 완료하게 되면 원래의 애플리케이션으로 돌아오게 됩니다. Intent를 통해 calendar 앱에서 작업을 수행하도록 설계하면 사용자에게 일관되고 안정적인 UI를 제공할 수 있기 때문에 권장되는 방식입니다.
- 동기화 adapter
동기화 adapter는 사용자 기기의 calendar 데이터를 다른 서버나 데이터와 동기화해줍니다. CalendarContract.Calendars와 CalendarContract.Events 테이블에는 동기화 adapter 전용으로 예약된 열이 있습니다. 해당 열을 provider나 일반 애플리케이션이 수정해서는 안 됩니다. 사실 이 열들은 동기화 adapter로 접근하지 않으면 보이지도 않습니다.
